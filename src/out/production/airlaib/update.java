package out.production.airlaib;

import com.toedter.calendar.JDateChooser;
import java.awt.event.ComponentAdapter;
import java.awt.event.ComponentEvent;

import javax.swing.*;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.*;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;

/**
 * This class represents a GUI application for updating airline tickets.
 * It allows users to search for existing tickets, view available flights, and
 * update ticket details.
 * The class provides functionality for changing the flight, date, class, and
 * seats for a ticket.
 *
 * @author laiba atiq
 * @version 1.0
 * @since 2022-06-12
 */
public class update extends javax.swing.JFrame {

    /**
     * Creates new form update
     */
    /**
     * Creates a new instance of the 'update' class.
     */
    public update() {
        initComponents();
        pack();
        addComponentListener(new ComponentAdapter() {
            @Override
            public void componentShown(ComponentEvent e) {
                setExtendedState(JFrame.MAXIMIZED_BOTH);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */

    // <editor-fold defaultstate="collapsed" desc="Generated
    // Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        backgroundPanel = new JPanel();
        flightTablePanel = new JScrollPane();
        jTable1 = new JTable();
        jPanel1 = new JPanel();
        jPanel3 = new JPanel();
        firstNameLable = new JLabel();
        lastNameLabel = new JLabel();
        passportNoLabel = new JLabel();
        jPanel2 = new JPanel();
        flightNoLabel = new JLabel();
        flightNameLabel = new JLabel();
        departureTimeLabel = new JLabel();
        classLabel = new JLabel();
        priceLabel = new JLabel();
        seatsLabel = new JLabel();
        txtclass = new JComboBox<>();
        txtprice = new JLabel();
        txtseats = new JSpinner();
        flightno = new JLabel();
        flightnamelabel = new JLabel();
        txtdept = new JLabel();
        backButton = new JButton();
        updateButten = new JButton();
        txtfirstname = new JLabel();
        txtlastname = new JLabel();
        txtpassport = new JLabel();
        searchFlightsButton = new JButton();
        txtdepart = new JComboBox<>();
        departureLabel = new JLabel();
        ticketNoLabel = new JLabel();
        dateLabel = new javax.swing.JLabel();
        ticketnoLabel = new JLabel();
        txtticketid = new JTextField();
        searchExistingTicket = new JButton();
        sourceLabel = new JLabel();
        txtsource = new JComboBox<>();
        headerPanel = new JPanel();
        updateFlightHeaderLabel = new JLabel();
        footerPanel = new JPanel();
        contactUsLabel = new JLabel();
        phoneNumberLabel = new JLabel();
        jLabel35 = new JLabel();
        jLabel36 = new JLabel();
        jSkyIcon = new JLabel();
        instagramIcon = new JLabel();
        linkedinIcon = new JLabel();
        txtdate = new JDateChooser();
        disablePastDates(txtdate);
        updateButten.setEnabled(false);
        txtseats.setEnabled(false);
        txtclass.setEnabled(false);
        txtsource.setEnabled(false);
        txtdepart.setEnabled(false);
        searchFlightsButton.setEnabled(false);
        txtdate.setEnabled(false);

        dateLabel.setFont(new java.awt.Font("Segoe UI Emoji", 1, 14)); // NOI18N
        dateLabel.setText("Date");

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        backgroundPanel.setBackground(new Color(146, 190, 190));

        jTable1.setModel(new DefaultTableModel(
                new Object[][] {
                },
                new String[] {
                        "Flight No", "Flight Name", "Source", "Departure", "DepTime", "ArrTime", "Charge"
                }));
        jTable1.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        flightTablePanel.setViewportView(jTable1);

        jPanel1.setBackground(new Color(151, 190, 190));

        jPanel3.setBackground(new Color(151, 190, 190));

        firstNameLable.setFont(new Font("Segoe UI Emoji", 1, 14)); // NOI18N
        firstNameLable.setText("FirstName");

        lastNameLabel.setFont(new Font("Segoe UI Emoji", 1, 14)); // NOI18N
        lastNameLabel.setText("LastName");

        passportNoLabel.setFont(new Font("Segoe UI Emoji", 1, 14)); // NOI18N
        passportNoLabel.setText("Passportno");

        jPanel2.setBackground(new Color(151, 190, 190));

        flightNoLabel.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        flightNoLabel.setText("Flight no");

        flightNameLabel.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        flightNameLabel.setText("Filght Name");

        departureTimeLabel.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        departureTimeLabel.setText("Departure Time");

        classLabel.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        classLabel.setText("Class");

        priceLabel.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        priceLabel.setText("Price");

        seatsLabel.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        seatsLabel.setText("Seats");

        txtclass.setModel(new DefaultComboBoxModel<>(new String[] { "Economy", "Business" }));

        txtclass.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                txtclassStateChanged(evt);
            }
        });

        txtseats.addChangeListener(new ChangeListener() {
            public void stateChanged(ChangeEvent evt) {
                txtseatsStateChanged(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2Layout.setHorizontalGroup(
                jPanel2Layout.createParallelGroup(Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
                                        .addComponent(flightNoLabel)
                                        .addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                        .addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
                                                                .addComponent(flightNameLabel)
                                                                .addComponent(departureTimeLabel)
                                                                .addComponent(classLabel)
                                                                .addComponent(seatsLabel))
                                                        .addGroup(jPanel2Layout.createParallelGroup(Alignment.LEADING)
                                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                                        .addGap(30)
                                                                        .addGroup(jPanel2Layout
                                                                                .createParallelGroup(Alignment.LEADING,
                                                                                        false)
                                                                                .addComponent(flightno)
                                                                                .addComponent(flightnamelabel)
                                                                                .addComponent(txtdept)
                                                                                .addComponent(txtclass, 0, 133,
                                                                                        Short.MAX_VALUE)))
                                                                .addGroup(jPanel2Layout.createSequentialGroup()
                                                                        .addGap(27)
                                                                        .addComponent(txtseats,
                                                                                GroupLayout.PREFERRED_SIZE, 64,
                                                                                GroupLayout.PREFERRED_SIZE))))
                                                .addComponent(priceLabel)
                                                .addComponent(txtprice, Alignment.TRAILING, GroupLayout.PREFERRED_SIZE,
                                                        136, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(131, Short.MAX_VALUE)));
        jPanel2Layout.setVerticalGroup(
                jPanel2Layout.createParallelGroup(Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(flightNoLabel, GroupLayout.PREFERRED_SIZE, 20,
                                                GroupLayout.PREFERRED_SIZE)
                                        .addComponent(flightno))
                                .addGap(26)
                                .addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(flightNameLabel)
                                        .addComponent(flightnamelabel))
                                .addGap(29)
                                .addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(departureTimeLabel)
                                        .addComponent(txtdept))
                                .addGap(21)
                                .addGroup(jPanel2Layout.createParallelGroup(Alignment.TRAILING)
                                        .addComponent(classLabel)
                                        .addComponent(txtclass, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                                GroupLayout.PREFERRED_SIZE))
                                .addGap(18)
                                .addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(priceLabel)
                                        .addComponent(txtprice))
                                .addGap(12)
                                .addGroup(jPanel2Layout.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(txtseats, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                                GroupLayout.PREFERRED_SIZE)
                                        .addComponent(seatsLabel))));
        jPanel2.setLayout(jPanel2Layout);

        backButton.setBackground(new Color(0, 51, 51));
        backButton.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        backButton.setForeground(new Color(255, 255, 255));
        backButton.setText("Cancel");
        backButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        updateButten.setBackground(new Color(0, 51, 51));
        updateButten.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        updateButten.setForeground(new Color(255, 255, 255));
        updateButten.setText("UPDATE");
        updateButten.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                updateButtenActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3Layout.setHorizontalGroup(
                jPanel3Layout.createParallelGroup(Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING)
                                                        .addComponent(firstNameLable)
                                                        .addComponent(lastNameLabel)
                                                        .addComponent(passportNoLabel))
                                                .addPreferredGap(ComponentPlacement.RELATED, 69, Short.MAX_VALUE)
                                                .addGroup(jPanel3Layout.createParallelGroup(Alignment.LEADING, false)
                                                        .addComponent(txtfirstname, GroupLayout.DEFAULT_SIZE, 140,
                                                                Short.MAX_VALUE)
                                                        .addComponent(txtlastname)
                                                        .addComponent(txtpassport))
                                                .addGap(129))
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(updateButten, GroupLayout.PREFERRED_SIZE, 138,
                                                        GroupLayout.PREFERRED_SIZE)
                                                .addGap(18)
                                                .addComponent(backButton, GroupLayout.PREFERRED_SIZE, 134,
                                                        GroupLayout.PREFERRED_SIZE)
                                                .addGap(120, 120, Short.MAX_VALUE))
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE,
                                                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))));
        jPanel3Layout.setVerticalGroup(
                jPanel3Layout.createParallelGroup(Alignment.LEADING)
                        .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(50)
                                .addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(firstNameLable)
                                        .addComponent(txtfirstname))
                                .addGap(30)
                                .addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(lastNameLabel)
                                        .addComponent(txtlastname))
                                .addGap(38)
                                .addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(passportNoLabel)
                                        .addComponent(txtpassport))
                                .addGap(18)
                                .addComponent(jPanel2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                        GroupLayout.PREFERRED_SIZE)
                                .addGap(18)
                                .addGroup(jPanel3Layout.createParallelGroup(Alignment.BASELINE)
                                        .addComponent(backButton, GroupLayout.PREFERRED_SIZE, 41,
                                                GroupLayout.PREFERRED_SIZE)
                                        .addComponent(updateButten, GroupLayout.PREFERRED_SIZE, 41,
                                                GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        jPanel3.setLayout(jPanel3Layout);
        ticketNo = new JLabel();

        ticketNo.setFont(new Font("Tahoma", 1, 24)); // NOI18N
        ticketNo.setForeground(new Color(255, 0, 0));
        ticketNo.setText("Ticket NO");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(Alignment.TRAILING)
                        .addGroup(Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                                .addGap(18)
                                .addComponent(ticketNo)
                                .addPreferredGap(ComponentPlacement.RELATED, 156, Short.MAX_VALUE)
                                .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, 452, GroupLayout.PREFERRED_SIZE)
                                .addGap(63)));
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addGap(22)
                                                .addComponent(ticketNo))
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(jPanel3, GroupLayout.PREFERRED_SIZE, 529,
                                                        GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(492, Short.MAX_VALUE)));
        jPanel1.setLayout(jPanel1Layout);

        searchFlightsButton.setBackground(new Color(0, 51, 51));
        searchFlightsButton.setForeground(new Color(255, 255, 255));
        searchFlightsButton.setText("Search");
        searchFlightsButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                searchFlightsButtonActionPerformed(evt);
            }
        });

        txtdepart.setModel(
                new DefaultComboBoxModel<>(new String[] { "Pakistan\t", "Srilanka", "Uk", "Usa", "Canada", "China" }));

        departureLabel.setFont(new Font("Segoe UI Emoji", 1, 14)); // NOI18N
        departureLabel.setHorizontalAlignment(SwingConstants.LEFT);
        departureLabel.setText("Departure");

        ticketNoLabel.setText("Ticket No");

        ticketnoLabel.setFont(new Font("Segoe UI Emoji", 1, 18)); // NOI18N
        ticketnoLabel.setText("Ticket No.");

        searchExistingTicket.setBackground(new Color(0, 51, 51));
        searchExistingTicket.setForeground(new Color(255, 255, 255));
        searchExistingTicket.setText("Search");
        searchExistingTicket.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent evt) {
                searchExistingTicketActionPerformed(evt);
            }
        });

        sourceLabel.setFont(new Font("Segoe UI Emoji", 1, 14)); // NOI18N
        sourceLabel.setText("Source");

        txtsource.setModel(
                new DefaultComboBoxModel<>(new String[] { "Pakistan", "Srilanka", "Uk", "Usa", "Canada", "Chinna" }));

        javax.swing.GroupLayout gl_backgroundPanel = new javax.swing.GroupLayout(backgroundPanel);
        gl_backgroundPanel.setHorizontalGroup(
                gl_backgroundPanel.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_backgroundPanel.createSequentialGroup()
                                .addGroup(gl_backgroundPanel.createParallelGroup(Alignment.LEADING)
                                        .addGroup(gl_backgroundPanel.createSequentialGroup()
                                                .addGap(181)
                                                .addGroup(gl_backgroundPanel
                                                        .createParallelGroup(Alignment.TRAILING, false)
                                                        .addGroup(gl_backgroundPanel.createSequentialGroup()
                                                                .addComponent(departureLabel)
                                                                .addGap(39)
                                                                .addComponent(txtdepart, GroupLayout.PREFERRED_SIZE,
                                                                        171, GroupLayout.PREFERRED_SIZE))
                                                        .addGroup(gl_backgroundPanel.createSequentialGroup()
                                                                .addGroup(gl_backgroundPanel
                                                                        .createParallelGroup(Alignment.LEADING)
                                                                        .addComponent(sourceLabel)
                                                                        .addComponent(dateLabel))
                                                                .addPreferredGap(ComponentPlacement.RELATED, 59,
                                                                        Short.MAX_VALUE)
                                                                .addGroup(gl_backgroundPanel
                                                                        .createParallelGroup(Alignment.LEADING)
                                                                        .addComponent(txtdate,
                                                                                GroupLayout.PREFERRED_SIZE, 190,
                                                                                GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(txtsource,
                                                                                GroupLayout.PREFERRED_SIZE, 173,
                                                                                GroupLayout.PREFERRED_SIZE)
                                                                        .addComponent(txtticketid,
                                                                                GroupLayout.PREFERRED_SIZE, 151,
                                                                                GroupLayout.PREFERRED_SIZE))))
                                                .addGap(301)
                                                .addComponent(ticketNoLabel))
                                        .addGroup(gl_backgroundPanel.createSequentialGroup()
                                                .addGroup(gl_backgroundPanel.createParallelGroup(Alignment.LEADING)
                                                        .addGroup(gl_backgroundPanel.createSequentialGroup()
                                                                .addContainerGap(80, Short.MAX_VALUE)
                                                                .addComponent(flightTablePanel,
                                                                        GroupLayout.PREFERRED_SIZE, 631,
                                                                        GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(ComponentPlacement.RELATED))
                                                        .addGroup(gl_backgroundPanel.createSequentialGroup()
                                                                .addGap(171)
                                                                .addComponent(ticketnoLabel)
                                                                .addPreferredGap(ComponentPlacement.RELATED, 248,
                                                                        Short.MAX_VALUE)
                                                                .addGroup(gl_backgroundPanel
                                                                        .createParallelGroup(Alignment.LEADING)
                                                                        .addComponent(searchExistingTicket)
                                                                        .addComponent(searchFlightsButton))
                                                                .addGap(149)))
                                                .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE,
                                                        GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(42, Short.MAX_VALUE)));
        gl_backgroundPanel.setVerticalGroup(
                gl_backgroundPanel.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_backgroundPanel.createSequentialGroup()
                                .addGap(37)
                                .addComponent(ticketNoLabel)
                                .addPreferredGap(ComponentPlacement.RELATED)
                                .addGroup(gl_backgroundPanel.createParallelGroup(Alignment.LEADING)
                                        .addComponent(jPanel1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                                GroupLayout.PREFERRED_SIZE)
                                        .addGroup(gl_backgroundPanel.createSequentialGroup()
                                                .addGap(7)
                                                .addGroup(gl_backgroundPanel.createParallelGroup(Alignment.TRAILING)
                                                        .addGroup(gl_backgroundPanel
                                                                .createParallelGroup(Alignment.BASELINE)
                                                                .addComponent(txtticketid, GroupLayout.PREFERRED_SIZE,
                                                                        GroupLayout.DEFAULT_SIZE,
                                                                        GroupLayout.PREFERRED_SIZE)
                                                                .addComponent(ticketnoLabel))
                                                        .addComponent(searchExistingTicket))
                                                .addGap(25)
                                                .addGroup(gl_backgroundPanel.createParallelGroup(Alignment.TRAILING)
                                                        .addComponent(dateLabel)
                                                        .addComponent(txtdate, GroupLayout.PREFERRED_SIZE,
                                                                GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                .addGap(33)
                                                .addGroup(gl_backgroundPanel.createParallelGroup(Alignment.BASELINE)
                                                        .addComponent(sourceLabel)
                                                        .addComponent(txtsource, GroupLayout.PREFERRED_SIZE,
                                                                GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                                                .addGap(29)
                                                .addGroup(gl_backgroundPanel.createParallelGroup(Alignment.TRAILING)
                                                        .addGroup(gl_backgroundPanel
                                                                .createParallelGroup(Alignment.BASELINE)
                                                                .addComponent(searchFlightsButton)
                                                                .addComponent(txtdepart, GroupLayout.PREFERRED_SIZE,
                                                                        GroupLayout.DEFAULT_SIZE,
                                                                        GroupLayout.PREFERRED_SIZE))
                                                        .addComponent(departureLabel))
                                                .addGap(18)
                                                .addComponent(flightTablePanel, GroupLayout.PREFERRED_SIZE, 237,
                                                        GroupLayout.PREFERRED_SIZE)))
                                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)));
        backgroundPanel.setLayout(gl_backgroundPanel);

        headerPanel.setBackground(new java.awt.Color(0, 102, 102));

        updateFlightHeaderLabel.setFont(new Font("Palatino Linotype", 1, 36)); // NOI18N
        updateFlightHeaderLabel.setForeground(new Color(255, 255, 255));
        updateFlightHeaderLabel.setText("UPDATE MY FLIGHT");

        javax.swing.GroupLayout gl_headerPanel = new javax.swing.GroupLayout(headerPanel);
        gl_headerPanel.setHorizontalGroup(
                gl_headerPanel.createParallelGroup(Alignment.TRAILING)
                        .addGroup(gl_headerPanel.createSequentialGroup()
                                .addContainerGap(630, Short.MAX_VALUE)
                                .addComponent(updateFlightHeaderLabel)
                                .addGap(565)));
        gl_headerPanel.setVerticalGroup(
                gl_headerPanel.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_headerPanel.createSequentialGroup()
                                .addGap(29)
                                .addComponent(updateFlightHeaderLabel)
                                .addContainerGap(31, Short.MAX_VALUE)));
        headerPanel.setLayout(gl_headerPanel);

        footerPanel.setBackground(new Color(0, 102, 102));

        contactUsLabel.setFont(new Font("Segoe UI", 1, 14)); // NOI18N
        contactUsLabel.setForeground(new Color(255, 255, 255));
        contactUsLabel.setText("CONTACT US");
        contactUsLabel.setToolTipText("");

        phoneNumberLabel.setFont(new Font("Segoe UI Light", 1, 14)); // NOI18N
        phoneNumberLabel.setForeground(new Color(255, 255, 255));
        phoneNumberLabel.setText("+51 789543");

        jSkyIcon.setIcon(new ImageIcon(getClass().getResource("/Screenshot 2022-07-06 000042.png"))); // NOI18N

        instagramIcon.setIcon(new ImageIcon(getClass().getResource("/insta.png"))); // NOI18N

        linkedinIcon.setIcon(new ImageIcon(getClass().getResource("/twit.png"))); // NOI18N

        GroupLayout gl_footerPanel = new GroupLayout(footerPanel);
        gl_footerPanel.setHorizontalGroup(
                gl_footerPanel.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_footerPanel.createSequentialGroup()
                                .addGap(19)
                                .addGroup(gl_footerPanel.createParallelGroup(Alignment.LEADING)
                                        .addGroup(gl_footerPanel.createSequentialGroup()
                                                .addComponent(contactUsLabel, GroupLayout.DEFAULT_SIZE, 913,
                                                        Short.MAX_VALUE)
                                                .addPreferredGap(ComponentPlacement.RELATED))
                                        .addGroup(gl_footerPanel.createParallelGroup(Alignment.LEADING)
                                                .addGroup(Alignment.TRAILING, gl_footerPanel.createSequentialGroup()
                                                        .addComponent(jLabel35)
                                                        .addGap(157))
                                                .addGroup(gl_footerPanel.createSequentialGroup()
                                                        .addComponent(phoneNumberLabel)
                                                        .addPreferredGap(ComponentPlacement.RELATED))))
                                .addGroup(gl_footerPanel.createParallelGroup(Alignment.TRAILING, false)
                                        .addGroup(gl_footerPanel.createSequentialGroup()
                                                .addComponent(jLabel36)
                                                .addGap(203))
                                        .addGroup(gl_footerPanel.createSequentialGroup()
                                                .addComponent(linkedinIcon)
                                                .addPreferredGap(ComponentPlacement.RELATED)
                                                .addComponent(instagramIcon)
                                                .addPreferredGap(ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                                                .addComponent(jSkyIcon)
                                                .addGap(58)))));
        gl_footerPanel.setVerticalGroup(
                gl_footerPanel.createParallelGroup(Alignment.LEADING)
                        .addGroup(gl_footerPanel.createSequentialGroup()
                                .addGroup(gl_footerPanel.createParallelGroup(Alignment.LEADING)
                                        .addGroup(gl_footerPanel.createSequentialGroup()
                                                .addContainerGap()
                                                .addComponent(contactUsLabel)
                                                .addPreferredGap(ComponentPlacement.RELATED)
                                                .addGroup(gl_footerPanel.createParallelGroup(Alignment.LEADING)
                                                        .addComponent(jLabel35)
                                                        .addComponent(phoneNumberLabel)))
                                        .addGroup(gl_footerPanel.createSequentialGroup()
                                                .addComponent(jLabel36)
                                                .addGroup(gl_footerPanel.createParallelGroup(Alignment.LEADING)
                                                        .addGroup(gl_footerPanel.createSequentialGroup()
                                                                .addPreferredGap(ComponentPlacement.UNRELATED)
                                                                .addComponent(jSkyIcon))
                                                        .addGroup(gl_footerPanel.createSequentialGroup()
                                                                .addGap(23)
                                                                .addGroup(gl_footerPanel
                                                                        .createParallelGroup(Alignment.LEADING)
                                                                        .addComponent(instagramIcon)
                                                                        .addComponent(linkedinIcon))))))
                                .addContainerGap(51, Short.MAX_VALUE)));
        footerPanel.setLayout(gl_footerPanel);

        GroupLayout layout = new GroupLayout(getContentPane());
        layout.setHorizontalGroup(
                layout.createParallelGroup(Alignment.TRAILING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                        .addComponent(headerPanel, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE,
                                                Short.MAX_VALUE)
                                        .addComponent(backgroundPanel, GroupLayout.PREFERRED_SIZE, 1565,
                                                GroupLayout.PREFERRED_SIZE)
                                        .addComponent(footerPanel, GroupLayout.DEFAULT_SIZE, 1555, Short.MAX_VALUE))
                                .addContainerGap()));
        layout.setVerticalGroup(
                layout.createParallelGroup(Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(Alignment.LEADING)
                                        .addComponent(headerPanel, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE,
                                                GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addGap(109)
                                                .addComponent(backgroundPanel, GroupLayout.PREFERRED_SIZE, 619,
                                                        GroupLayout.PREFERRED_SIZE)))
                                .addPreferredGap(ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(footerPanel, GroupLayout.PREFERRED_SIZE, 122,
                                        GroupLayout.PREFERRED_SIZE)));
        getContentPane().setLayout(layout);

        pack();
        txtsource.addActionListener(e -> updateDestinationDropdown());
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @return the txtdate
     */
    public com.toedter.calendar.JDateChooser getTxtdate() {
        return txtdate;
    }

    /**
     * @param txtdate the txtdate to set
     */
    public void setTxtdate(com.toedter.calendar.JDateChooser txtdate) {
        this.txtdate = txtdate;
    }

    /**
     * Handle a change in the 'class' combo box selection.
     *
     * @param evt The ActionEvent triggered by the user's action.
     */
    public void txtclassStateChanged(ActionEvent evt) {
        int seats = (int) txtseats.getValue();
        String classSeat = (String) txtclass.getSelectedItem();

        int price_used;
        if (price == 0) {
            if (oldclass.equals("Business"))
                price_used = (int) ((oldprice) / (Integer.parseInt(oldseats) * 1.5));
            else
                price_used = (int) ((oldprice) / Integer.parseInt(oldseats));
        } else
            price_used = price;

        if (!txtprice.getText().equals("") && seats > 0 && seats < 10) {

            if (classSeat.equals("Business")) {
                double bill = 1.5 * price_used * seats;
                txtprice.setText(String.valueOf((int) bill));
            } else {
                double bill = price_used * seats;
                txtprice.setText(String.valueOf((int) bill));
            }
        }
    }

    /**
     * Disables dates earlier than the current date in a JDateChooser component.
     * Displays a dialog box if the user tries to select a past date.
     *
     * @param dateChooser The JDateChooser component for which to disable past
     *                    dates.
     */
    public void disablePastDates(final JDateChooser dateChooser) {
        // Get the current date
        Date currentDate = new Date();

        // Set the minimum selectable date to the current date
        dateChooser.setDate(currentDate);

        // Disable the date cells before the current date in the calendar
        Calendar calendar = Calendar.getInstance();
        calendar.setTime(currentDate);

        // Set the lower bound for the date cells
        dateChooser.addPropertyChangeListener("date", new PropertyChangeListener() {
            @Override
            public void propertyChange(PropertyChangeEvent e) {
                if ("date".equals(e.getPropertyName())) {
                    Date selectedDate = (Date) e.getNewValue();
                    if (selectedDate != null && selectedDate.before(calendar.getTime())) {
                        // Display a dialog box notifying the user
                        JOptionPane.showMessageDialog(
                                null,
                                "Please select a date equal to or after the current date.",
                                "Invalid Date",
                                JOptionPane.WARNING_MESSAGE);

                        // Reset the date to the current date
                        dateChooser.setDate(calendar.getTime());
                        setTxtdate(dateChooser);
                    }
                }
            }
        });
    }

    /**
     * Updates the destination dropdown based on the selected source.
     * It removes the selected source from the destination dropdown and sets the
     * updated
     * list of destinations to the destination dropdown.
     */
    public void updateDestinationDropdown() {
        // Get the selected source from the sourceText dropdown
        String selectedSource = txtsource.getSelectedItem().toString();

        // Remove the selected source from the destinationText dropdown
        DefaultComboBoxModel<String> destinationModel = new DefaultComboBoxModel<>();
        for (int i = 0; i < txtsource.getItemCount(); i++) {
            String item = txtsource.getItemAt(i).toString();

            // Add only non-selected sources to the destination dropdown
            if (!item.equals(selectedSource)) {
                destinationModel.addElement(item);
            }
        }

        // Set the updated list of destinations to the destination dropdown
        txtdepart.setModel(destinationModel);

    }

    /**
     * Handle a change in the 'seats' spinner state.
     *
     * @param evt The ChangeEvent triggered by the user's action.
     */
    public void txtseatsStateChanged(ChangeEvent evt) {
        int seats = (int) txtseats.getValue();
        String classSeat = (String) txtclass.getSelectedItem();

        int price_used;
        if (price == 0) {
            if (oldclass.equals("Business"))
                price_used = (int) ((oldprice) / (Integer.parseInt(oldseats) * 1.5));
            else
                price_used = (int) ((oldprice) / Integer.parseInt(oldseats));
        } else
            price_used = price;

        if (!txtprice.getText().equals("") && seats > 0 && seats < 10) {

            if (classSeat.equals("Business")) {
                double bill = 1.5 * price_used * seats;
                txtprice.setText(String.valueOf((int) bill));
            } else {
                double bill = price_used * seats;
                txtprice.setText(String.valueOf((int) bill));
            }
        }
    }

    Connection con;
    PreparedStatement pst;

    /**
     * Handle a mouse click event on the flight selection table.
     *
     * @param evt The MouseEvent triggered by the mouse click.
     */
    public void jTable1MouseClicked(java.awt.event.MouseEvent evt) {// GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:

        DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();

        int selectIndex = jTable1.getSelectedRow();

        price = Integer.parseInt((String) Df.getValueAt(selectIndex, 6));

        flightno.setText(Df.getValueAt(selectIndex, 0).toString());
        flightnamelabel.setText(Df.getValueAt(selectIndex, 1).toString());
        txtdept.setText(Df.getValueAt(selectIndex, 4).toString());
        txtprice.setText(Df.getValueAt(selectIndex, 6).toString());
    }// GEN-LAST:event_jTable1MouseClicked

    /**
     * Handle the button click event to search for available flights based on source
     * and destination.
     *
     * @param evt The ActionEvent triggered by the button click.
     * @throws ClassNotFoundException if the MySQL JDBC driver class is not found
     * @throws SQLException           if a database access error occurs
     */
    public void searchFlightsButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_searchFlightsButtonActionPerformed
        // TODO add your handling code here:

        String source = txtsource.getSelectedItem().toString().trim();
        String depart = txtdepart.getSelectedItem().toString().trim();

        try {

            con = connectionManager.getConnection();
            pst = con.prepareStatement("SELECT * from flight WHERE source = ? and depart = ?");

            pst.setString(1, source);
            pst.setString(2, depart);
            ResultSet rs = pst.executeQuery();

            ResultSetMetaData rsm = rs.getMetaData();
            int c;
            c = rsm.getColumnCount();

            DefaultTableModel Df = (DefaultTableModel) jTable1.getModel();
            jTable1.setDefaultEditor(Object.class, null);
            Df.setRowCount(0);

            while (rs.next()) {
                arrivaltime = rs.getString("arrtime");
                flightname = rs.getString("flightname");
                departTime = rs.getString("deptime");
                sourceCity = rs.getString("source");
                departCity = rs.getString("depart");
                Vector v2 = new Vector();

                for (int i = 1; i <= c; i++) {
                    v2.add(rs.getString("id"));
                    v2.add(rs.getString("flightname"));
                    v2.add(rs.getString("source"));
                    v2.add(rs.getString("depart"));
                    // v2.add(rs.getString("date"));
                    v2.add(rs.getString("deptime"));
                    v2.add(rs.getString("arrtime"));
                    v2.add(rs.getString("flightcharge"));
                }

                Df.addRow(v2);

            }

        } catch (SQLException ex) {
            Logger.getLogger(ticket.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_searchFlightsButtonActionPerformed

    /**
     * Handle the button click event to search for a ticket by ID.
     *
     * @param evt The ActionEvent triggered by the button click.
     * @throws ClassNotFoundException if the MySQL JDBC driver class is not found
     * @throws SQLException           if a database access error occurs
     */

    public void searchExistingTicketActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_searchExistingTicketActionPerformed
        // TODO add your handling code here:
        String id = txtticketid.getText();
        ticketNo.setText(id);

        try {

            con = connectionManager.getConnection();
            pst = con.prepareStatement("select * from ticket where id = ?");
            pst.setString(1, id);
            ResultSet rs = pst.executeQuery();

            if (rs.next() == false) {
                JOptionPane.showMessageDialog(this, "Record not Found");
            } else {
                oldclass = rs.getString("class");
                oldseats = rs.getString("seats");
                String fname = rs.getString("firstname");
                String lname = rs.getString("lastname");
                departTime = rs.getString("deptime");
                arrivaltime = rs.getString("arrtime");
                String passport = rs.getString("passport");
                flightname = rs.getString("flightname");
                oldprice = rs.getInt("price");
                sourceCity = rs.getString("source");
                departCity = rs.getString("depart");
                flightid = rs.getString("flightid");
                custid = rs.getString("custid");
                Date date = rs.getDate("date");

                txtseats.setValue(Integer.parseInt(oldseats));
                txtdate.setDate(date);
                txtclass.setSelectedItem(oldclass);
                txtfirstname.setText(fname.trim());
                txtlastname.setText(lname.trim());
                flightno.setText(flightid);
                flightnamelabel.setText(flightname.trim());
                txtpassport.setText(passport.trim());
                txtdept.setText(departTime.trim());
                txtprice.setText(String.valueOf(oldprice));
                txtsource.setSelectedItem(sourceCity);
                txtdepart.setSelectedItem(departCity);

                searchExistingTicket.setEnabled(false);
                txtticketid.setEditable(false);

                updateButten.setEnabled(true);
                txtseats.setEnabled(true);
                txtclass.setEnabled(true);
                txtsource.setEnabled(true);
                txtdepart.setEnabled(true);
                searchFlightsButton.setEnabled(true);
                txtdate.setEnabled(true);

            }

        } catch (SQLException ex) {
            Logger.getLogger(ticket.class.getName()).log(Level.SEVERE, null, ex);
        }
    }// GEN-LAST:event_searchExistingTicketActionPerformed

    /**
     * @return the b1
     */
    public bill getB1() {
        return B1;
    }

    /**
     * @param b1 the b1 to set
     */
    public void setB1(bill b1) {
        B1 = b1;
    }

    /**
     * @return the flightno
     */
    public javax.swing.JLabel getFlightno() {
        return flightno;
    }

    /**
     * @param flightno the flightno to set
     */
    public void setFlightno(javax.swing.JLabel flightno) {
        this.flightno = flightno;
    }

    /**
     * @return the flightname
     */
    public String getFlightname() {
        return flightname;
    }

    /**
     * @param flightname the flightname to set
     */
    public void setFlightname(String flightname) {
        this.flightname = flightname;
    }

    /**
     * @return the departTime
     */
    public String getDepartTime() {
        return departTime;
    }

    /**
     * @param departTime the departTime to set
     */
    public void setDepartTime(String departTime) {
        this.departTime = departTime;
    }

    /**
     * @return the arrivaltime
     */
    public String getArrivaltime() {
        return arrivaltime;
    }

    /**
     * @param arrivaltime the arrivaltime to set
     */
    public void setArrivaltime(String arrivaltime) {
        this.arrivaltime = arrivaltime;
    }

    /**
     * @return the sourceCity
     */
    public String getSourceCity() {
        return sourceCity;
    }

    /**
     * @param sourceCity the sourceCity to set
     */
    public void setSourceCity(String sourceCity) {
        this.sourceCity = sourceCity;
    }

    /**
     * @return the departCity
     */
    public String getDepartCity() {
        return departCity;
    }

    /**
     * @param departCity the departCity to set
     */
    public void setDepartCity(String departCity) {
        this.departCity = departCity;
    }

    /**
     * @return the txtclass
     */
    public javax.swing.JComboBox<String> getTxtclass() {
        return txtclass;
    }

    /**
     * @param txtclass the txtclass to set
     */
    public void setTxtclass(javax.swing.JComboBox<String> txtclass) {
        this.txtclass = txtclass;
    }

    /**
     * @return the txtfirstname
     */
    public javax.swing.JLabel getTxtfirstname() {
        return txtfirstname;
    }

    /**
     * @param txtfirstname the txtfirstname to set
     */
    public void setTxtfirstname(javax.swing.JLabel txtfirstname) {
        this.txtfirstname = txtfirstname;
    }

    /**
     * @return the txtlastname
     */
    public javax.swing.JLabel getTxtlastname() {
        return txtlastname;
    }

    /**
     * @param txtlastname the txtlastname to set
     */
    public void setTxtlastname(javax.swing.JLabel txtlastname) {
        this.txtlastname = txtlastname;
    }

    /**
     * @return the txtpassport
     */
    public javax.swing.JLabel getTxtpassport() {
        return txtpassport;
    }

    /**
     * @param txtpassport the txtpassport to set
     */
    public void setTxtpassport(javax.swing.JLabel txtpassport) {
        this.txtpassport = txtpassport;
    }

    /**
     * @return the txtticketid
     */
    public javax.swing.JTextField getTxtticketid() {
        return txtticketid;
    }

    /**
     * @param txtticketid the txtticketid to set
     */
    public void setTxtticketid(javax.swing.JTextField txtticketid) {
        this.txtticketid = txtticketid;
    }

    /**
     * Handle the button click event to update a ticket with new details.
     *
     * @param evt The ActionEvent triggered by the button click.
     * @throws ClassNotFoundException if the MySQL JDBC driver class is not found
     * @throws SQLException           if a database access error occurs
     * @throws NullPointerException   if the date is not entered
     */

    public void updateButtenActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:

        String ticketid = ticketNo.getText();
        String flightid = flightno.getText();
        String flightclass = txtclass.getSelectedItem().toString().trim();
        String seats = txtseats.getValue().toString();

        DateFormat da = new SimpleDateFormat("yyyy-MM-dd");

        if (seats.equals("") || Integer.parseInt(seats) < 1 || Integer.parseInt(seats) > 9) {
            JOptionPane.showMessageDialog(this, "Seats must be between 1-9");
        } else {
            try {
                String date = da.format(txtdate.getDate());

                SimpleDateFormat df = new SimpleDateFormat("yyyy");
                String year = df.format(txtdate.getDate());
                int yr = Integer.parseInt(year);
                if (!(yr == 2023 || yr == 2024)) {
                    JOptionPane.showMessageDialog(this, "Can only book for the year 2023 or 2024");
                } else {
                    con = connectionManager.getConnection();
                    PreparedStatement preparedStmt = con.prepareStatement(
                            "UPDATE ticket SET flightid=?,flightname=?,custid=?,firstname=?,lastname=?,passport=?,class=?,price=?,seats=?,date=?,deptime=?,arrtime=?,source=?,depart=? WHERE id = ?");
                    preparedStmt.setString(15, ticketid);
                    preparedStmt.setString(1, flightid);
                    preparedStmt.setString(2, flightname);
                    preparedStmt.setString(3, custid);
                    preparedStmt.setString(4, txtfirstname.getText());
                    preparedStmt.setString(5, txtlastname.getText());
                    preparedStmt.setString(6, txtpassport.getText());
                    preparedStmt.setString(7, flightclass);
                    preparedStmt.setString(8, txtprice.getText());

                    preparedStmt.setString(9, seats);
                    preparedStmt.setString(10, date);
                    preparedStmt.setString(11, departTime);
                    preparedStmt.setString(12, arrivaltime);
                    preparedStmt.setString(13, sourceCity);
                    preparedStmt.setString(14, departCity);

                    // execute the java preparedstatement
                    preparedStmt.executeUpdate();

                    JOptionPane.showMessageDialog(null, "Ticket Updated");
                    this.dispose();
                    B1 = new bill(custid, ticketid);
                    B1.setVisible(true);
                }
            } catch (ClassNotFoundException | SQLException ex) {
                Logger.getLogger(addflight.class.getName()).log(Level.SEVERE, null, ex);
            } catch (NullPointerException e) {
                JOptionPane.showMessageDialog(this, "Please enter the Date");
            }
        }
    }

    // GEN-LAST:event_jButton1ActionPerformed

    /**
     * @return the c1
     */
    public cusdomain getC1() {
        return C1;
    }

    /**
     * @param c1 the c1 to set
     */
    public void setC1(cusdomain c1) {
        C1 = c1;
    }

    /**
     * @return the custid
     */
    public String getCustid() {
        return custid;
    }

    /**
     * @param custid the custid to set
     */
    public void setCustid(String custid) {
        this.custid = custid;
    }

    /**
     * @return the txtprice
     */
    public javax.swing.JLabel getTxtprice() {
        return txtprice;
    }

    /**
     * @param txtprice the txtprice to set
     */
    public void setTxtprice(javax.swing.JLabel txtprice) {
        this.txtprice = txtprice;
    }

    /**
     * @return the txtseats
     */
    public javax.swing.JSpinner getTxtseats() {
        return txtseats;
    }

    /**
     * @param txtseats the txtseats to set
     */
    public void setTxtseats(javax.swing.JSpinner txtseats) {
        this.txtseats = txtseats;
    }

    /**
     * @return the price
     */
    public int getPrice() {
        return price;
    }

    /**
     * @param price the price to set
     */
    public void setPrice(int price) {
        this.price = price;
    }

    /**
     * Handle the button click event to return to the customer domain.
     *
     * @param evt The ActionEvent triggered by the button click.
     */
    public void backButtonActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
        C1 = new cusdomain();
        C1.setVisible(true);
    }// GEN-LAST:event_backButtonActionPerformed

    public void setConnection(Connection mockConnection) throws SQLException {
        mockConnection = connectionManager.getConnection();

    }

    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton updateButten;
    private javax.swing.JButton backButton;
    private javax.swing.JButton searchFlightsButton;
    private javax.swing.JButton searchExistingTicket;
    private javax.swing.JLabel sourceLabel;
    private javax.swing.JLabel flightNoLabel;
    private javax.swing.JLabel flightNameLabel;
    private javax.swing.JLabel departureTimeLabel;
    private javax.swing.JLabel classLabel;
    private javax.swing.JLabel priceLabel;
    private javax.swing.JLabel seatsLabel;
    private javax.swing.JLabel contactUsLabel;
    private javax.swing.JLabel departureLabel;
    private javax.swing.JLabel ticketNoLabel;
    private javax.swing.JLabel phoneNumberLabel;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jSkyIcon;
    private javax.swing.JLabel instagramIcon;
    private javax.swing.JLabel linkedinIcon;
    private javax.swing.JLabel updateFlightHeaderLabel;
    private javax.swing.JLabel ticketnoLabel;
    private javax.swing.JLabel firstNameLable;
    private javax.swing.JLabel lastNameLabel;
    private javax.swing.JLabel passportNoLabel;
    private javax.swing.JLabel dateLabel;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel headerPanel;
    private javax.swing.JPanel backgroundPanel;
    private javax.swing.JPanel footerPanel;
    private javax.swing.JScrollPane flightTablePanel;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel txtfirstname;
    private javax.swing.JLabel txtlastname;
    private javax.swing.JLabel txtpassport;
    private javax.swing.JLabel flightno;
    private javax.swing.JLabel flightnamelabel;
    private javax.swing.JLabel txtdept;
    private javax.swing.JComboBox<String> txtclass;
    private javax.swing.JTextField txtticketid;
    private com.toedter.calendar.JDateChooser txtdate;
    private javax.swing.JComboBox<String> txtdepart;
    private javax.swing.JLabel txtprice;
    private javax.swing.JSpinner txtseats;
    private javax.swing.JComboBox<String> txtsource;
    private javax.swing.JLabel ticketNo;
    private String departTime, arrivaltime, sourceCity, departCity, flightname, flightid;
    private int price, oldprice;
    private String oldclass, oldseats, custid;
    private bill B1;
    private cusdomain C1;
    // End of variables declaration//GEN-END:variables
}